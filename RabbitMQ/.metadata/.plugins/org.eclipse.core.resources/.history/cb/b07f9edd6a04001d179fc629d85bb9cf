package rabbitmq.demos.request_reply.response_matching;

import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

public class Replier {

	public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {
		
		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost("localhost");
		factory.setVirtualHost("/");
		factory.setPort(5672);
        factory.setUsername("guest");
        factory.setPassword("guest");		
        
        Connection conn = factory.newConnection();
        final Channel channel = conn.createChannel();

        var consumer = new EventingBasicConsumer(channel);
        consumer.Received += (sender, e) =>
        {
            string requestData = System.Text.Encoding.UTF8.GetString(e.Body.ToArray());
            CalculationRequest request = JsonConvert.DeserializeObject<CalculationRequest>(requestData);
            Console.WriteLine("Request received:" + request.ToString());

            CalculationResponse response = new CalculationResponse();

            if(request.Operation == OperationType.Add)
            {
                response.Result = request.Number1 + request.Number2;
            }
            else if(request.Operation == OperationType.Subtract)
            {
                response.Result = request.Number1 - request.Number2;
            }                

            string responseData = JsonConvert.SerializeObject(response);

            var basicProperties = channel.CreateBasicProperties();
            basicProperties.Headers = new Dictionary<string, object>();
            basicProperties.Headers.Add(Demo.Common.Constants.RequestIdHeaderKey, e.BasicProperties.Headers[Demo.Common.Constants.RequestIdHeaderKey]);

            channel.BasicPublish(
            "",
            "responses",
            basicProperties,
            Encoding.UTF8.GetBytes(responseData));
        };

        channel.BasicConsume("requests", true, consumer);

        Console.WriteLine("Press a key to exit.");
        Console.ReadKey();

        channel.Close();
        conn.Close();
	}
}
