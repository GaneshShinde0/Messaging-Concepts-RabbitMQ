package rabbitmq.demos.push_pull;

import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

public class PushPullDemo {

	public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {
		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost("localhost");
		factory.setVirtualHost("/");
		factory.setPort(5672);
        factory.setUsername("guest");
        factory.setPassword("guest");		
        
        Connection conn = factory.newConnection();
        Channel channel = conn.createChannel();

        //readMessagesWithPushModel();
        readMessagesWithPullModel();

        channel.close();
        conn.close();
	}
	
	private static void readMessagesWithPushModel()
    {
        var consumer = new EventingBasicConsumer(channel);
        consumer.Received += (sender, e) =>
          {
              string message = Encoding.UTF8.GetString(e.Body.ToArray());
              Console.WriteLine("Message:"+message);
          };

        string consumerTag = channel.BasicConsume("my.queue1", true, consumer);

        Console.WriteLine("Subscribed. Press enter to unsubscribe and exit.");
        Console.ReadKey();

        channel.BasicCancel(consumerTag);
    }
	
	private static void readMessagesWithPullModel()
    {
        Console.WriteLine("Reading messages from queue. Press 'e' to exit.");

        while(true)
        {
            Console.WriteLine("Trying to get a message from the queue...");

            BasicGetResult result = channel.BasicGet("my.queue1", true);
            if(result != null)
            {
                string message = Encoding.UTF8.GetString(result.Body.ToArray());
                Console.WriteLine("Message:" + message);
            }

            if(Console.KeyAvailable)
            {
                var keyInfo = Console.ReadKey();
                if (keyInfo.KeyChar == 'e' || keyInfo.KeyChar == 'E')
                    return;
            }

            Thread.Sleep(2000);
        }
    }
}
