package rabbitmq.demos.request_reply.response_matching;

import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

public class Requestor {

	public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {
		
		ConcurrentMap<String, CalculationRequest> waitingRequests = new ConcurrentMap<String, CalculationRequest>();
		
		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost("localhost");
		factory.setVirtualHost("/");
		factory.setPort(5672);
        factory.setUsername("guest");
        factory.setPassword("guest");		
        
        Connection conn = factory.newConnection();
        Channel channel = conn.createChannel();
        
        Consumer consumer = new DefaultConsumer(channel) {
	         @Override
	         public void handleDelivery(String consumerTag,
	                                    Envelope envelope,
	                                    AMQP.BasicProperties properties,
	                                    byte[] body)
	             throws IOException
	         {
	        	 string requestId = Encoding.UTF8.GetString((byte[])e.BasicProperties.Headers[Demo.Common.Constants.RequestIdHeaderKey]);
                 CalculationRequest request;

                 if (waitingRequests.TryRemove(requestId, out request))
                 {
                     string messageData = System.Text.Encoding.UTF8.GetString(e.Body.ToArray());
                     CalculationResponse response = JsonConvert.DeserializeObject<CalculationResponse>(messageData);                      

                     Console.WriteLine("Calculation result: " + request.ToString() +"="+ response.ToString());
                 }	             
	         }
	     };       

       channel.basicConsume("responses", true, consumer);
       
       System.out.print("Press enter to send requests");
       Scanner reader = new Scanner(System.in);
       reader.nextLine();

       sendRequest(waitingRequests, channel, new CalculationRequest(2, 4, OperationType.Add));
       sendRequest(waitingRequests, channel, new CalculationRequest(8, 6, OperationType.Subtract));
       sendRequest(waitingRequests, channel, new CalculationRequest(20, 7, OperationType.Add));            
       sendRequest(waitingRequests, channel, new CalculationRequest(50, 8, OperationType.Subtract));

       reader.nextLine();

       channel.close();
       conn.close();

	}

}
